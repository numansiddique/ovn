dnl OVS_VSCTL_SETUP
dnl
dnl Creates an empty database in the current directory and then starts
dnl an ovsdb-server on it for ovs-vsctl to connect to.
m4_define([OVS_VSCTL_SETUP],
  [OVS_CHECK_LCOV(
     [SCHEMA=$abs_top_builddir/vswitchd/vswitch-idl.ovsschema
      if test ! -e $SCHEMA; then
        SCHEMA=$abs_top_srcdir/vswitchd/vswitch-idl.ovsschema
          if test ! -e $SCHEMA; then
            echo 'Failed to find vswitch-idl.ovsschema'
            exit 1
          fi
      fi
      ovsdb-tool create db $SCHEMA],
     [0], [stdout], [ignore])
   OVS_CHECK_LCOV(
     [[ovsdb-tool transact db \
        '[{"op": "insert",
           "table": "Open_vSwitch",
           "row": {}}]']],
     [0], [ignore], [ignore])
   AT_CHECK([ovsdb-server --detach --pidfile=$PWD/pid --remote=punix:socket --unixctl=$PWD/unixctl db >/dev/null 2>&1], [0], [ignore], [ignore])])

dnl OVS_VSCTL_CLEANUP
dnl
dnl Kills off the database server.
m4_define([OVS_VSCTL_CLEANUP], [test ! -e pid || kill `cat pid`])

dnl RUN_OVS_VSCTL(COMMAND, ...)
dnl
dnl Executes each ovs-vsctl COMMAND.
m4_define([RUN_OVS_VSCTL],
  [m4_foreach([command], [$@], [ovs-vsctl --no-wait -vreconnect:ANY:emer --db=unix:socket -- command
])])
m4_define([RUN_OVS_VSCTL_ONELINE],
  [m4_foreach([command], [$@], [ovs-vsctl --no-wait -vreconnect:ANY:emer --db=unix:socket --oneline -- command
])])

dnl RUN_OVS_VSCTL_TOGETHER(COMMAND, ...)
dnl
dnl Executes each ovs-vsctl COMMAND in a single run of ovs-vsctl.
m4_define([RUN_OVS_VSCTL_TOGETHER],
  [ovs-vsctl --no-wait -vreconnect:ANY:emer --db=unix:socket --oneline dnl
m4_foreach([command], [$@], [ -- command])])

dnl CHECK_BRIDGES([BRIDGE, PARENT, VLAN], ...)
dnl
dnl Verifies that "ovs-vsctl list-br" prints the specified list of bridges,
dnl which must be in alphabetical order.  Also checks that each BRIDGE has the
dnl specified PARENT and is on the given VLAN.
m4_define([_CHECK_BRIDGE],
  [AT_CHECK([RUN_OVS_VSCTL([br-to-parent $1])], [0], [$2
], [], [OVS_VSCTL_CLEANUP])

   # Check br-to-vlan, without --oneline.
   AT_CHECK([RUN_OVS_VSCTL([br-to-vlan $1])], [0], [$3
], [], [OVS_VSCTL_CLEANUP])
   # Check br-to-vlan, with --oneline.
   # (This particular test is interesting with --oneline because it returns
   # an integer instead of a string and that can cause type mismatches inside
   # python if not done carefully.)
   AT_CHECK([RUN_OVS_VSCTL_ONELINE([br-to-vlan $1])], [0], [$3
], [], [OVS_VSCTL_CLEANUP])

   # Check multiple queries in a single run.
   AT_CHECK([RUN_OVS_VSCTL_TOGETHER([br-to-parent $1], [br-to-vlan $1])], [0],
[$2
$3
], [], [OVS_VSCTL_CLEANUP])])
m4_define([CHECK_BRIDGES],
  [dnl Check that the bridges appear on list-br, without --oneline.
   AT_CHECK(
     [RUN_OVS_VSCTL([list-br])],
     [0],
     [m4_foreach([brinfo], [$@], [m4_car(brinfo)
])],
     [],
     [OVS_VSCTL_CLEANUP])

   dnl Check that the bridges appear on list-br, with --oneline.
   AT_CHECK(
     [RUN_OVS_VSCTL_ONELINE([list-br])],
     [0],
     [m4_join([\n], m4_foreach([brinfo], [$@], [m4_car(brinfo),]))
],
     [],
     [OVS_VSCTL_CLEANUP])

   dnl Check that each bridge exists according to br-exists and that
   dnl a bridge that should not exist does not.
   m4_foreach([brinfo], [$@], 
              [AT_CHECK([RUN_OVS_VSCTL([br-exists m4_car(brinfo)])], [0], [],
                        [], [OVS_VSCTL_CLEANUP])])
   AT_CHECK([RUN_OVS_VSCTL([br-exists nonexistent])], [2], [], [],
            [OVS_VSCTL_CLEANUP])

   dnl Check that each bridge has the expected parent and VLAN.
   m4_map([_CHECK_BRIDGE], [$@])])

dnl CHECK_PORTS(BRIDGE, PORT[, PORT...])
dnl
dnl Verifies that "ovs-vsctl list-ports BRIDGE" prints the specified
dnl list of ports, which must be in alphabetical order.  Also checks
dnl that "ovs-vsctl port-to-br" reports that each port is
dnl in BRIDGE.
m4_define([CHECK_PORTS],
  [dnl Check ports without --oneline.
   AT_CHECK(
     [RUN_OVS_VSCTL([list-ports $1])],
     [0],
     [m4_foreach([port], m4_cdr($@), [port
])],
     [],
     [OVS_VSCTL_CLEANUP])

   dnl Check ports with --oneline.
   AT_CHECK(
     [RUN_OVS_VSCTL_ONELINE([list-ports $1])],
     [0],
     [m4_join([\n], m4_shift($@))
],
     [],
     [OVS_VSCTL_CLEANUP])
   AT_CHECK([RUN_OVS_VSCTL([port-to-br $1])], [1], [],
            [ovs-vsctl: no port named $1
],
            [OVS_VSCTL_CLEANUP])
   m4_foreach(
     [port], m4_cdr($@), 
     [AT_CHECK([RUN_OVS_VSCTL([[port-to-br] port])], [0], [$1
], [], [OVS_VSCTL_CLEANUP])])])

dnl CHECK_IFACES(BRIDGE, IFACE[, IFACE...])
dnl
dnl Verifies that "ovs-vsctl list-ifaces BRIDGE" prints the specified
dnl list of ifaces, which must be in alphabetical order.  Also checks
dnl that "ovs-vsctl iface-to-br" reports that each interface is
dnl in BRIDGE.
m4_define([CHECK_IFACES],
  [AT_CHECK(
     [RUN_OVS_VSCTL([list-ifaces $1])],
     [0],
     [m4_foreach([iface], m4_cdr($@), [iface
])],
     [],
     [OVS_VSCTL_CLEANUP])
   AT_CHECK([RUN_OVS_VSCTL([iface-to-br $1])], [1], [],
            [ovs-vsctl: no interface named $1
],
            [OVS_VSCTL_CLEANUP])
   m4_foreach(
     [iface], m4_cdr($@), 
     [AT_CHECK([RUN_OVS_VSCTL([[iface-to-br] iface])], [0], [$1
],
               [], [OVS_VSCTL_CLEANUP])])])

dnl ----------------------------------------------------------------------
AT_BANNER([ovs-vsctl unit tests -- real bridges])

AT_SETUP([add-br a])
AT_KEYWORDS([ovs-vsctl])
OVS_VSCTL_SETUP
AT_CHECK([RUN_OVS_VSCTL([add-br a])], [0], [], [], [OVS_VSCTL_CLEANUP])
CHECK_BRIDGES([a, a, 0])
CHECK_PORTS([a])
CHECK_IFACES([a])
OVS_VSCTL_CLEANUP
AT_CLEANUP

AT_SETUP([add-br a, add-br a])
AT_KEYWORDS([ovs-vsctl])
OVS_VSCTL_SETUP
AT_CHECK([RUN_OVS_VSCTL([add-br a])], [0], [], [], [OVS_VSCTL_CLEANUP])
AT_CHECK([RUN_OVS_VSCTL([add-br a])], [1], [],
  [ovs-vsctl: cannot create a bridge named a because a bridge named a already exists
], [OVS_VSCTL_CLEANUP])
OVS_VSCTL_CLEANUP
AT_CLEANUP

AT_SETUP([add-br a, add-br b])
AT_KEYWORDS([ovs-vsctl])
OVS_VSCTL_SETUP
AT_CHECK([RUN_OVS_VSCTL([add-br a], [add-br b])], [0], [], [],
         [OVS_VSCTL_CLEANUP])
CHECK_BRIDGES([a, a, 0], [b, b, 0])
CHECK_PORTS([a])
CHECK_IFACES([a])
CHECK_PORTS([b])
CHECK_IFACES([b])
OVS_VSCTL_CLEANUP
AT_CLEANUP

AT_SETUP([add-br a, add-br b, del-br a])
AT_KEYWORDS([ovs-vsctl])
OVS_VSCTL_SETUP
AT_CHECK([RUN_OVS_VSCTL([add-br a], [add-br b], [del-br a])], [0], [], [],
         [OVS_VSCTL_CLEANUP])
CHECK_BRIDGES([b, b, 0])
CHECK_PORTS([b])
CHECK_IFACES([b])
OVS_VSCTL_CLEANUP
AT_CLEANUP

AT_SETUP([add-br a, add-port a a1, add-port a a2])
AT_KEYWORDS([ovs-vsctl])
OVS_VSCTL_SETUP
AT_CHECK([RUN_OVS_VSCTL(
   [add-br a],
   [--if-exists del-br b],
   [add-port a a1],
   [add-port a a2])], [0], [], [], [OVS_VSCTL_CLEANUP])
CHECK_BRIDGES([a, a, 0])
CHECK_PORTS([a], [a1], [a2])
CHECK_IFACES([a], [a1], [a2])
OVS_VSCTL_CLEANUP
AT_CLEANUP

AT_SETUP([add-br a, add-port a a1, add-port a a1])
AT_KEYWORDS([ovs-vsctl])
OVS_VSCTL_SETUP
AT_CHECK([RUN_OVS_VSCTL(
   [add-br a], 
   [add-port a a1])], [0], [], [], [OVS_VSCTL_CLEANUP])
AT_CHECK([RUN_OVS_VSCTL([add-port a a1])], [1], [],
  [ovs-vsctl: cannot create a port named a1 because a port named a1 already exists on bridge a
], [OVS_VSCTL_CLEANUP])
OVS_VSCTL_CLEANUP
AT_CLEANUP

AT_SETUP([add-br a b, add-port a a1, add-port b b1, del-br a])
AT_KEYWORDS([ovs-vsctl])
OVS_VSCTL_SETUP
AT_CHECK([RUN_OVS_VSCTL_TOGETHER(
   [add-br a], 
   [add-br b], 
   [add-port a a1],
   [add-port b b1],
   [--if-exists del-port b b2],
   [del-br a])], [0], [





], [], [OVS_VSCTL_CLEANUP])
CHECK_BRIDGES([b, b, 0])
CHECK_PORTS([b], [b1])
CHECK_IFACES([b], [b1])
OVS_VSCTL_CLEANUP
AT_CLEANUP

AT_SETUP([add-br a, add-bond a bond0 a1 a2 a3])
AT_KEYWORDS([ovs-vsctl])
OVS_VSCTL_SETUP
AT_CHECK([RUN_OVS_VSCTL(
   [add-br a], 
   [add-bond a bond0 a1 a2 a3])], [0], [], [], [OVS_VSCTL_CLEANUP])
CHECK_BRIDGES([a, a, 0])
CHECK_PORTS([a], [bond0])
CHECK_IFACES([a], [a1], [a2], [a3])
OVS_VSCTL_CLEANUP
AT_CLEANUP

AT_SETUP([add-br a b, add-port a a1, add-port b b1, del-port a a1])
AT_KEYWORDS([ovs-vsctl])
OVS_VSCTL_SETUP
AT_CHECK([RUN_OVS_VSCTL(
  [add-br a], 
  [add-br b], 
  [add-port a a1],
  [add-port b b1],
  [del-port a a1])], [0], [], [], [OVS_VSCTL_CLEANUP])
CHECK_BRIDGES([a, a, 0], [b, b, 0])
CHECK_PORTS([a])
CHECK_IFACES([a])
CHECK_PORTS([b], [b1])
CHECK_IFACES([b], [b1])
OVS_VSCTL_CLEANUP
AT_CLEANUP

AT_SETUP([add-br a, add-bond a bond0 a1 a2 a3, del-port bond0])
AT_KEYWORDS([ovs-vsctl])
OVS_VSCTL_SETUP
AT_CHECK([RUN_OVS_VSCTL_TOGETHER(
  [add-br a], 
  [add-bond a bond0 a1 a2 a3],
  [del-port bond0])], [0], [


], [], [OVS_VSCTL_CLEANUP])
CHECK_BRIDGES([a, a, 0])
CHECK_PORTS([a])
OVS_VSCTL_CLEANUP
AT_CLEANUP

AT_SETUP([external IDs])
AT_KEYWORDS([ovs-vsctl])
OVS_VSCTL_SETUP
AT_CHECK([RUN_OVS_VSCTL_TOGETHER(
  [add-br a], 
  [add-port a a1],
  [add-bond a bond0 a2 a3],
  [br-set-external-id a key0 value0],
  [port-set-external-id a1 key1 value1],
  [iface-set-external-id a2 key2 value2],
  [iface-set-external-id a2 key3 value3],
  [iface-set-external-id a3 key4 value4],
  [br-get-external-id a],
  [br-get-external-id a key0],
  [br-get-external-id a key1],
  [br-set-external-id a key0 othervalue],
  [br-get-external-id a],
  [br-set-external-id a key0],
  [br-get-external-id a],
  [port-get-external-id a1],
  [iface-get-external-id a2],
  [iface-get-external-id a3])], [0], [







key0=value0
value0


key0=othervalue


key1=value1
key2=value2\nkey3=value3
key4=value4
], [], [OVS_VSCTL_CLEANUP])
AT_CHECK([RUN_OVS_VSCTL_TOGETHER(
  [br-get-external-id a],
  [port-get-external-id a1],
  [iface-get-external-id a2],
  [iface-get-external-id a3])], [0],
[
key1=value1
key2=value2\nkey3=value3
key4=value4
], [], [OVS_VSCTL_CLEANUP])
CHECK_BRIDGES([a, a, 0])
CHECK_PORTS([a], [a1], [bond0])
CHECK_IFACES([a], [a1], [a2], [a3])
OVS_VSCTL_CLEANUP
AT_CLEANUP

dnl ----------------------------------------------------------------------
AT_BANNER([ovs-vsctl unit tests -- fake bridges])

m4_define([OVS_VSCTL_SETUP_SIMPLE_FAKE_CONF],
  [AT_CHECK(
     [RUN_OVS_VSCTL(
        [add-br xenbr0],
        [add-port xenbr0 eth0],
        [add-br xapi1 xenbr0 9],
        [add-port xapi1 eth0.9])],
     [0], [], [], [OVS_VSCTL_CLEANUP])])

AT_SETUP([simple fake bridge])
AT_KEYWORDS([ovs-vsctl fake-bridge])
OVS_VSCTL_SETUP
OVS_VSCTL_SETUP_SIMPLE_FAKE_CONF
CHECK_BRIDGES([xapi1, xenbr0, 9], [xenbr0, xenbr0, 0])
CHECK_PORTS([xenbr0], [eth0])
CHECK_IFACES([xenbr0], [eth0])
CHECK_PORTS([xapi1], [eth0.9])
CHECK_IFACES([xapi1], [eth0.9])
OVS_VSCTL_CLEANUP
AT_CLEANUP

AT_SETUP([simple fake bridge + del-br fake bridge])
AT_KEYWORDS([ovs-vsctl fake-bridge])
OVS_VSCTL_SETUP
OVS_VSCTL_SETUP_SIMPLE_FAKE_CONF
AT_CHECK([RUN_OVS_VSCTL([del-br xapi1])], [0], [], [], [OVS_VSCTL_CLEANUP])
CHECK_BRIDGES([xenbr0, xenbr0, 0])
CHECK_PORTS([xenbr0], [eth0])
CHECK_IFACES([xenbr0], [eth0])
OVS_VSCTL_CLEANUP
AT_CLEANUP

AT_SETUP([simple fake bridge + del-br real bridge])
AT_KEYWORDS([ovs-vsctl fake-bridge])
OVS_VSCTL_SETUP
OVS_VSCTL_SETUP_SIMPLE_FAKE_CONF
AT_CHECK([RUN_OVS_VSCTL([del-br xenbr0])], [0], [], [], [OVS_VSCTL_CLEANUP])
CHECK_BRIDGES
OVS_VSCTL_CLEANUP
AT_CLEANUP

AT_SETUP([simple fake bridge + external IDs])
AT_KEYWORDS([ovs-vsctl fake-bridge])
OVS_VSCTL_SETUP
OVS_VSCTL_SETUP_SIMPLE_FAKE_CONF
AT_CHECK([RUN_OVS_VSCTL_TOGETHER(
  [br-set-external-id xenbr0 key0 value0],
  [br-set-external-id xapi1 key1 value1],
  [br-get-external-id xenbr0],
  [br-get-external-id xenbr0 key0],
  [br-get-external-id xapi1],
  [br-get-external-id xapi1 key1])], [0], [

key0=value0
value0
key1=value1
value1
], [], [OVS_VSCTL_CLEANUP])
CHECK_BRIDGES([xapi1, xenbr0, 9], [xenbr0, xenbr0, 0])
CHECK_PORTS([xenbr0], [eth0])
CHECK_IFACES([xenbr0], [eth0])
CHECK_PORTS([xapi1], [eth0.9])
CHECK_IFACES([xapi1], [eth0.9])
OVS_VSCTL_CLEANUP
AT_CLEANUP

m4_define([OVS_VSCTL_SETUP_BOND_FAKE_CONF],
  [AT_CHECK(
     [RUN_OVS_VSCTL(
        [add-br xapi1],
        [add-bond xapi1 bond0 eth0 eth1],
        [add-br xapi2 xapi1 11],
        [add-port xapi2 bond0.11])],
     [0], [], [], [OVS_VSCTL_CLEANUP])])

AT_SETUP([fake bridge on bond])
AT_KEYWORDS([ovs-vsctl fake-bridge])
OVS_VSCTL_SETUP
OVS_VSCTL_SETUP_BOND_FAKE_CONF
CHECK_BRIDGES([xapi1, xapi1, 0], [xapi2, xapi1, 11])
CHECK_PORTS([xapi1], [bond0])
CHECK_IFACES([xapi1], [eth0], [eth1])
CHECK_PORTS([xapi2], [bond0.11])
CHECK_IFACES([xapi2], [bond0.11])
OVS_VSCTL_CLEANUP
AT_CLEANUP

AT_SETUP([fake bridge on bond + del-br fake bridge])
AT_KEYWORDS([ovs-vsctl fake-bridge])
OVS_VSCTL_SETUP
OVS_VSCTL_SETUP_BOND_FAKE_CONF
AT_CHECK([RUN_OVS_VSCTL_ONELINE([del-br xapi2])], [0], [
], [], [OVS_VSCTL_CLEANUP])
CHECK_BRIDGES([xapi1, xapi1, 0])
CHECK_PORTS([xapi1], [bond0])
CHECK_IFACES([xapi1], [eth0], [eth1])
OVS_VSCTL_CLEANUP
AT_CLEANUP

AT_SETUP([fake bridge on bond + del-br real bridge])
AT_KEYWORDS([ovs-vsctl fake-bridge])
OVS_VSCTL_SETUP
OVS_VSCTL_SETUP_BOND_FAKE_CONF
AT_CHECK([RUN_OVS_VSCTL([del-br xapi1])])
CHECK_BRIDGES
OVS_VSCTL_CLEANUP
AT_CLEANUP
